function load_storyline_view(simulations){
    var color = ['#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462']
    event_color = color
    simulations = simulations.simulation

    event_name = ["Asteroids Airbursts","Asteroids Hit the Ocean","Pressure Wave Arrive Sealevel","Shock Wave Arriving Seabed","Water Jet and Rim Waves", "Self Defined"]

    var margin = {top: 20, right: 20, bottom: 20, left: 20 }
    var storyline_view = d3.select(".storyline_view")


    var width = parseFloat(storyline_view.attr("width")) - margin.left - margin.right
    var height = parseFloat(storyline_view.attr("height")) - margin.top - margin.bottom
    //console.log("open js")


    var svg = storyline_view.append("g")
        .attr("id", "storyline_svg")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        .attr("width", width)
        .attr("height", height)


	load_storyline_mesh()


    var line_container_svg = svg.append("g")
        .attr("width", width)

    var line_container = svg.selectAll(".line_container")
        .data(simulations)
        .enter().append("g")
        .attr("class","lines")
        .attr("transform",function(d){
            transform = "translate(0," + height * ( d.id + 1 ) / 9 + ")"
            return transform
        })
        .on("mouseover",function(d){
          console.log(d)
          highlight_simulation(d.name)
          refresh_highlight_all()
          // d3.select(this).classed("highlight", true)
        })
        .on("mouseout",function(d){
          highlight_simulation(d.name)
          refresh_highlight_all()
          // d3.select(this).classed("highlight", false)
        })
	

	line_container.append("text")
    			  .text(function(d){return d.name})
    			  .attr('x',-width/40)
    			  .attr('y',height/30)
    			  .attr("font-size", "0.5em")
	
	
    var tool_tip = d3.tip()
            .attr("class", "d3-tip")
            .offset([-8, 0])
            .html(function(d) {
            return d;
            });

    svg.call(tool_tip);


    lineGenerator = d3.line()
                      .x(function(d) {
                            return d[0]
                        })
                       .y(function(d) {
                            return d[1];
                       });

line_container.selectAll(".key_frame")
        .data(function(d){
          return d.resolution[0].scalar[0].keyframe
        })
        .enter()
        .append('path')
        //.attr('stroke', '#333')
        //.attr('stroke-width', '2')
        .attr("class", function(d){
      		return "key_frame" + d.id;
      	})
        .attr('fill', function(d){
            return color[d.id]
        })
        .attr('d', function(d){
            return lineGenerator(tri_generator(width * parseInt(d.timestep) / 50000, 0))
        })
       .on("click", function(d){
            // alert(d.timestep)
        })
        .on("mousemove",function(d,i){
           var input = "Timestep : " + d.timestep;
           tool_tip.show(input);
        })
	    .on("mouseout",function(d){
            tool_tip.hide();

	    })


    line_container.append("rect")
        .attr("class","line")
        .attr("width",width )
        .attr("height",height/25)
        .style("border-style","solid")
        // .style("fill",function(d){
        //   return simulation_color[d.id]
        // })
        .attr("id" , function(d){ return "number" + d.id;});


    line_container.selectAll(".tick")
        .data(function(d){
          return d.resolution[0].scalar[0].timestep
        })
        .enter()
        .append("rect")
        .attr("class", "tick")
        .attr("x", function(d){
          timestep = parseInt(d.time)
          return width * timestep / 50000;
        })
        .attr("height", height/25 )
        .attr("width", "1px")
        .attr("fill", function(d,i){
              // console.log(d3.select(this.parentNode))
              return "#444"
            })
            .attr("opacity",0.3)

    line_container.append("rect")
                .attr("class","fake_line")
                .attr("width",width )
                .attr("height",height/25)
                .attr("opacity", 0)
                .on("click", function(d){
            //alert(d3.select(this).attr("x"))
            var timestep;

            // alert(d3.event.offsetX)
            console.log("event.x",d3.event.x)
            console.log("event.y",d3.event.y)
            //console.log("event", d3.event)
            console.log(d3.event.offsetX)
            console.log(d3.event.offsetY)

	        if(d3.event.offsetX>0 && d3.event.offsetX<width)
		        timestep = d3.event.offsetX * 50000 / width


	        // alert(d.name); //simulation name

	        var totaltimestepcnt = d.resolution[0].scalar[0].totaltimestepcnt;
            var find = 0;

	        for(var i = 0; i < totaltimestepcnt; i++)
	        {
		        if(d.resolution[0].scalar[0].timestep[i].time > timestep)
		        {
			        timestep = d.resolution[0].scalar[0].timestep[i].time;
                    find = 1;
			        break;
		        }
	        }
            if(find == 0)
            timestep = d.resolution[0].scalar[0].timestep[totaltimestepcnt-1].time
	        // alert("Timestp : " + timestep);


            var return_num = select_image(d.name , timestep);
            //alert("!");
            if( !return_num)
                return;

            refresh_all();
            //alert("!");

            console.log("timestep", timestep)


            //d3.selectAll(".tag").remove();
            d3.select("#storyline_svg")
            .append("g")
            .append("path")
            .attr("class", "tag")
            .attr('d', function(){
                return (lineGenerator(tri_generator(timestep*width/50000, height * ( d.id + 1 ) / 9)))
            })
            .attr("timestep", function(){
                return timestep;
            })
            .attr("simulation", function(){
                //alert(d.name)
                return d.name;
            })
            .style("fill",color[5])
            .on("click", function(d){

                //alert(d3.select(this).attr("timestep"))
                d3.select(this).remove();
                delete_image(d3.select(this).attr("simulation") ,d3.select(this).attr("timestep"));
                refresh_all();
                tool_tip.hide();

            })
            .on("mousemove",function(d,i){
                highlight_simulation(d3.select(this).attr("simulation"))
                refresh_highlight_all()
               var input ="Timestep : " + d3.select(this).attr("timestep");
               tool_tip.show(input);
            })
            .on("mouseout",function(d){
                highlight_simulation(d3.select(this).attr("simulation"))
                refresh_highlight_all()
                tool_tip.hide();
            })

   })
	    .on("mouseover",function(d){
            var input ="Simulation : "+ d.name + "<br>" + "Asteroid Diameter : " + d.diameter + "m<br>" + "Angle of Entry : " + d.angle + "Â°";
	        if (d.airburst == 0)
                input = input + "<br>" + "No Airburst";
            else
                input = input + "<br>" + "Airburst happens " + d.airburst + "km above sea level"
            tool_tip.show(input);
        })
        .on("mouseout", function(d){
            tool_tip.hide();
        })


    load_time_tick()
    load_storyline_legend(color)

}

function load_time_tick(){
  var storyline_svg = d3.select("#storyline_svg")
  var width = parseInt(storyline_svg.attr("width"))
  var height = parseInt(storyline_svg.attr("height"))

  var xRange = d3.scaleLinear().domain([0,50000]).range([0,width])
  var xAxis = d3.axisBottom(xRange)
  var tick = storyline_svg.append("g")
            .attr("id", "timetick")
            .call(xAxis)
            .each(function(d){
              position = distance_from_parent_to_id(this, "compare_story")
              d3.select(this).attr("compare_story_x", position.x)
              d3.select(this).attr("compare_story_y", position.y)
            })

  tick.selectAll("line")
      .attr("stroke", "#333")

  tick.selectAll("path")
      .attr("stroke", "#333")
}

function load_storyline_legend(color)
{
    var storyline_svg = d3.select("#storyline_svg")
    var width = parseInt(storyline_svg.attr("width"))
    var height = parseInt(storyline_svg.attr("height"))

    var svg = storyline_svg.append("g")
          .attr("id", "legend")
          .attr("transform", "translate(0," + height * 8 / 9 + ")")

          var dataset = [ width*0.1 , width*0.1 , width*0.1 , width*0.1 , width*0.1 , width*0.1];

          var rectWidth = width*0.166;
       	  var rectHeight = height*0.1;

          svg.selectAll(".rect")
                .data(dataset)
                .enter()
                .append("g")
  	      .append("rect")

                .attr("x",function(d,i){
  		   return i * rectWidth;
  	      })
                .attr("y",0)
                .attr("width",function(d){
                      return d / 10 ;
                })
                .attr("height",rectHeight / 1.6)
                .attr("fill",function(d,i){
                      return color[i];
                })
			.attr("opacity",1)
			.on("click",function(d,i){
            if(i == 5)
            {
                if(d3.select(this).attr("opacity")==1)
		        {
			        d3.select(this).attr("opacity",0.2);
		    	    	d3.selectAll(".tag").attr("visibility","hidden")
			    }
			    else
			    {
				d3.select(this).attr("opacity",1);
		    	    	d3.selectAll(".tag").attr("visibility","visible")
			    }
            }

            else
            {
                if(d3.select(this).attr("opacity")==1)
		        {
			        d3.select(this).attr("opacity",0.2);
		    	    d3.selectAll(".key_frame"+i).attr("visibility","hidden")
			    }
			    else
			    {
				    d3.select(this).attr("opacity",1);
		    	    d3.selectAll(".key_frame"+i).attr("visibility","visible")
			    }
            }



		})


  	var font_size = rectHeight/2.4 + "px"



          svg.selectAll(".text")
              .data(event_name)
              .enter()
              .append("text")
              .style("font-size", font_size)
  	    //.style("color", "#000000")
              .attr("fill", color[5])
              .attr("x", function(d, i){
  		return (i + 0.08)* rectWidth;
  	    })
              .attr("y", function(d, i) {
                  return 0.5*rectHeight;
              })
              .text(function(d){return d;
  	    })
}

function select_timestep(simulations, height , width)
{

	var tool_tip1 = d3.tip()
            .attr("class", "d3-tip")
            .offset([-8, 0])
            .html(function(d) {
            return d;
            });

    d3.select("#storyline_svg").call(tool_tip1);


	var line_container = svg.selectAll(".line_container")
      .on("click",function(d){
			//alert(d3.event.offsetX) // -3 -> width -3 ???
			var timestep;
      console.log("d3.event.offsetX",d3.event.offsetX)
			if(d3.event.offsetX>0 && d3.event.offsetX<width)
				timestep = d3.event.offsetX * 50000 / width

			var totaltimestepcnt = d.resolution[0].scalar[0].totaltimestepcnt;

			for(var i = 0; i < totaltimestepcnt; i++)
			{
				if(d.resolution[0].scalar[0].timestep[i].time > timestep)
				{
					timestep = d.resolution[0].scalar[0].timestep[i].time;
					break;
				}
			}

            //alert(d.name); //simulation name
			//alert("Nearest timestep:" + timestep);
		})

        .on("mouseover",function(d){
            var input ="Simulation : "+ d.name;
            tool_tip1.show(input);
        })
        .on("mouseout", function(d){
            tool_tip1.hide();
        })


}

function refresh_storyline(){
  d3.selectAll(".lines").classed("highlight", function(d){
    if (get_simulation_highlight_by_name(d.name)){
      return true
    }
    return false
  })

  d3.selectAll(".lines").classed("chosen", function(d){
    if (get_simulation_by_name(d.name) === 0 ){
      return false
    }
    return true
  })
  // d3.select(this).classed("highlight", true)
}

function tri_generator(x,y)
{
    var storyline_view = d3.select(".storyline_view")
    var margin = {top: 20, right: 20, bottom: 20, left: 20 }
    var width = parseFloat(storyline_view.attr("width")) - margin.left - margin.right

    var edge_length = width * 0.014;
    var tri_data = [[0, 0], [20, 0],[10, 17], [0,0]];
    tri_data[0][0] = x - edge_length * 0.5;
    tri_data[0][1] = y - edge_length * 0.5 * 1.732;

    tri_data[1][0] = x + edge_length * 0.5;
    tri_data[1][1] = y - edge_length * 0.5 * 1.732;

    tri_data[2][0] = x;
    tri_data[2][1] = y;

    tri_data[3][0] = x - edge_length * 0.5;
    tri_data[3][1] = y - edge_length * 0.5 * 1.732;
    //alert(tri_data)
    return tri_data
}


function load_storyline_mesh()
{
	var storyline_svg = d3.select("#storyline_svg")
    var width = parseInt(storyline_svg.attr("width"))
    var height = parseInt(storyline_svg.attr("height"))

	var svg = storyline_svg.append("g")

	var labels = [0, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000];

	svg.selectAll(".rect")
	.data(labels)
	.enter()
    .append("g")
  	.append("rect")
	.attr("x",function(d){
		//alert(d)
  		return d/50000*width;
  	})
    .attr("y",0)
    .attr("width",function(d){
        return width/5000 ;
    })
    .attr("height",height * 0.82)
    .attr("fill","#000000")
	.attr("opacity" , 0.5)
}
